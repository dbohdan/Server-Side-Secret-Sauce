#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
% Listings setup
\usepackage{listingsutf8}
\usepackage{ulem} 
\lstloadlanguages{Python}
\lstloadlanguages{HTML}
\lstloadlanguages{tcl}
\lstloadlanguages{sh}

% Beamer setup
\usetheme[nonav]{Metro}
\hypersetup{
  colorlinks=true,
  linkcolor=blue,
}
\end_preamble
\options t
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman DejaVu Serif
\font_sans Open Sans
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
definecolor{BrownGray}{HTML}{272822}
\end_layout

\begin_layout Plain Layout

%
\backslash
setbeamercolor{background canvas}{bg=BrownGray}
\end_layout

\begin_layout Plain Layout

%
\backslash
setbeamercolor{normal text}{fg=white}
\end_layout

\begin_layout Plain Layout

%
\backslash
setbeamercolor{bibliography item}{fg=white}
\end_layout

\begin_layout Plain Layout


\backslash
setbeamercolor*{bibliography entry title}{fg=white}
\end_layout

\begin_layout Plain Layout


\backslash
setbeamercolor*{bibliography entry author}{fg=white}
\end_layout

\begin_layout Plain Layout


\backslash
setbeamercolor*{bibliography entry journal}{fg=white}
\end_layout

\begin_layout Plain Layout


\backslash
setbeamercolor*{bibliography entry note}{fg=white}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Server-Side Secret Sauce
\end_layout

\begin_layout Subtitle
Rapidly Prototyping
\begin_inset Newline newline
\end_inset

a WebSocket Application
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Danyil Bohdan
\end_layout

\begin_layout Author
Danyil Bohdan
\end_layout

\begin_layout Date
2015
\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
label=recipe
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Recipe
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="right" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
websocketd
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
netcat
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tcl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
easy rapid prototyping
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
websocketd
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

WebSockets the UNIX way
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Faster than many languages' native WebSocket implementation 
\begin_inset CommandInset citation
LatexCommand cite
key "perf-comment"

\end_inset


\end_layout

\begin_layout Itemize
Low latency overhead (3 ms roundtrip)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Party like it's 1999!
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
CGI (as in 
\family typewriter
/cgi-bin/
\family default
, not as in Michael Bay) is back.
\end_layout

\begin_layout Itemize
Wasn't CGI slow and bad?
\end_layout

\begin_layout Itemize
No slow but slow and expensive 
\begin_inset Flex Emphasize
status open

\begin_layout Plain Layout
to start.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Doesn't matter because our processes are long-lived.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
netcat
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

The TCP/IP swiss army
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
A universal socket client/server
\end_layout

\begin_layout Itemize
Talk to sockets from the command line
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
printf "GET / HTTP/1.1
\backslash
r
\backslash
nHost: example.com
\backslash
r
\backslash
n
\backslash
r
\backslash
n" | nc example.com 80
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Plumbing with netcat
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
websocketd spawns a separate process for each connection
\end_layout

\begin_deeper
\begin_layout Itemize
What if you wanted the clients to interact with each other?
\end_layout

\end_deeper
\begin_layout Itemize
Have a TCP server listen on a regular TCP socket
\end_layout

\begin_layout Itemize
Redirect WebSocket connections to it
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
./websocketd-v0.2.11-linux-x86_64 --port=8080 nc localhost 7777
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 1 — Client
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=HTML,basicstyle=
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{example1/index.html}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 1 — Server
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=sh,basicstyle=
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{example1/run.sh}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 2 — Client
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=HTML,basicstyle=
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{example2/index.html}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 2 — Server (1)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=sh,basicstyle=
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{example2/run.sh}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 2 — Server (2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{language=Python,basicstyle=
\backslash
footnotesize}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{example2/fizzbuzzer.py}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 2 — Screenshot (1)
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename example2/screenshot-fizzbuzz.png
	height 70pheight%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename example2/screenshot-fizzbuzz-2.png
	height 70pheight%

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example 3 — Screenshot
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename example3/screenshot-chat-3.png
	width 65page%

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tcl
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout Itemize
A scripting language:
\end_layout

\begin_deeper
\begin_layout Itemize
Unityped: 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
E
\end_layout

\end_inset

verything 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
I
\end_layout

\end_inset

s 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
a
\end_layout

\end_inset

 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
S
\end_layout

\end_inset

tring (
\begin_inset Quotes eld
\end_inset

EIAS
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
Reference-counted (no tracing GC)
\end_layout

\begin_layout Itemize
Immutable data
\end_layout

\begin_layout Itemize
Event-driven
\end_layout

\begin_layout Itemize
Built-in non-blocking TCP socket I/O
\end_layout

\begin_layout Itemize
Feels like a Lisp/shell script hybrid
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What using Tcl gets us
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What strings being Tcl's native language means for us:
\end_layout

\begin_layout Itemize
TypeScript code on the client
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ws.send("tv " + Math.round(tdx) + " " + Math.round(tdy));
\end_layout

\end_deeper
\begin_layout Itemize
Data sent
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
tv 7 8
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What using Tcl gets us (2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Tcl code on the server code: no parsing!
\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename server-code.png
	width 80page%

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What the whole thing gets 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Lower latency
\end_layout

\begin_layout Itemize
A multiplayer game state replicator
\begin_inset Newline newline
\end_inset

(aka 
\begin_inset Quotes eld
\end_inset

50% of Agar.io
\begin_inset Quotes erd
\end_inset

)
\begin_inset Newline newline
\end_inset

in 
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
under 250 lines
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout AgainFrame
recipe
\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
References
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "websocketd"

\end_inset

 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://websocketd.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "perf-comment"

\end_inset

 See 
\begin_inset CommandInset href
LatexCommand href
name "comment"
target "https://github.com/joewalnes/websocketd/issues/153#issuecomment-104266876"

\end_inset

 for an example.
 This matches the speaker's experience.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "tcl-wikipedia"

\end_inset

 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Tcl
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_body
\end_document
